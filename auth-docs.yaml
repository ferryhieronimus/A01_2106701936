openapi: 3.0.0
info:
  title: Authentication Service API
  description: Authentication microservice for AAW Marketplace
  version: 1.0.0
  contact:
    name: AAW Team

servers:
  - url: http://localhost:8000
    description: Local development server

paths:
  /api/auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - full_name
                - address
                - phone_number
              properties:
                username:
                  type: string
                  example: "johndoe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  format: password
                  minLength: 8
                  pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).+$"
                  description: "Password must be at least 8 characters long and include at least one lowercase letter, one uppercase letter, and one number."
                  example: "StrongPass1"
                full_name:
                  type: string
                  example: "John Doe"
                address:
                  type: string
                  example: "123 Main St, City, Country"
                phone_number:
                  type: string
                  example: "+1234567890"
      responses:
        '201':
          description: User successfully registered
        '400':
          description: Validation Failed
        '500':
          description: Internal server error

  /api/auth/v1/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - full_name
                - address
                - phone_number
              properties:
                username:
                  type: string
                  example: "johndoe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  format: password
                  minLength: 8
                  pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).+$"
                  description: "Password must be at least 8 characters long and include at least one lowercase letter, one uppercase letter, and one number."
                  example: "StrongPass1"
                full_name:
                  type: string
                  example: "John Doe"
                address:
                  type: string
                  example: "123 Main St, City, Country"
                phone_number:
                  type: string
                  example: "+1234567890"
      responses:
        '201':
          description: User successfully registered
        '400':
          description: Validation Failed
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /api/auth/login:
    post:
      summary: Login user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: "johndoe"
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: "StrongPass1"
      responses:
        '200':
          description: User logged in successfully
        '400':
          description: Validation Failed
        '404':
          description: User not found
        '500':
          description: Internal server error

  /api/auth/v1/login:
    post:
      summary: Login user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: "johndoe"
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: "StrongPass1"
      responses:
        '200':
          description: User logged in successfully
        '400':
          description: Validation Failed
        '401':
          description: User not found
        '500':
          description: Internal server error

  /api/auth/verify-token:
    post:
      summary: Verify JWT token
      tags:
        - Authentication
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  example: "your-jwt-token"
      responses:
        '200':
          description: Admin token is valid
        '403':
          description: Invalid token
        '500':
          description: Internal server error

  /api/auth/v1/verify-token:
    post:
      summary: Verify JWT token
      tags:
        - Authentication
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  example: "your-jwt-token"
      responses:
        '200':
          description: Admin token is valid
        '401':
          description: Invalid token
        '500':
          description: Internal server error

  /api/auth/verify-admin-token:
    post:
      summary: Verify admin JWT token
      tags:
        - Authentication
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  example: "your-admin-jwt-token"
      responses:
        '200':
          description: Admin token is valid
        '403':
          description: Invalid token
        '500':
          description: Internal server error

  /api/auth/v1/verify-admin-token:
    post:
      summary: Verify admin JWT token
      tags:
        - Authentication
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  example: "your-admin-jwt-token"
      responses:
        '200':
          description: Admin token is valid
        '401':
          description: Invalid token
        '500':
          description: Internal server error
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - full_name
                - address
                - phone_number
              properties:
                username:
                  type: string
                  example: "johndoe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  format: password
                  minLength: 8
                  pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).+$"
                  description: "Password must be at least 8 characters long and include at least one lowercase letter, one uppercase letter, and one number."
                  example: "StrongPass1"
                full_name:
                  type: string
                  example: "John Doe"
                address:
                  type: string
                  example: "123 Main St, City, Country"
                phone_number:
                  type: string
                  example: "+1234567890"
      responses:
        '201':
          description: User successfully registered
        '400':
          description: Validation Failed
        '500':
          description: Internal server error

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT